# Function to get SQL connection
function Get-SqlConnection {
    param (
        [string]$sqlServer,
        [string]$database
    )
    $SQLConn = New-Object System.Data.SqlClient.SqlConnection
    $SQLConn.ConnectionString = "Server=$sqlServer;Database=$database;Trusted_Connection=True;"
    $SQLConn.Open()
    return $SQLConn
}

# Function to get API keys from the database
function Get-ApiKeys {
    param (
        [System.Data.SqlClient.SqlConnection]$SQLConn
    )
    $query = "SELECT PublicKey, PrivateKey FROM MongoDB.DimOrganization WHERE OrgName = 'CAPE'"
    $cmd = $SQLConn.CreateCommand()
    $cmd.CommandText = $query
    $keys = @()
    $reader = $cmd.ExecuteReader()
    try {
        while ($reader.Read()) {
            $keys = @($reader["PublicKey"], $reader["PrivateKey"])
        }
    } finally {
        $reader.Close()
    }
    if ($keys.Count -eq 0) {
        throw "No API keys found."
    }
    return $keys
}

# Function to get server information from the database
function Get-ServerInfo {
    param (
        [System.Data.SqlClient.SqlConnection]$SQLConn
    )
    $servers = @()
    $query = "SELECT HostName_Port, GroupId FROM MongoDB.MongoServers_STG"
    $cmd = $SQLConn.CreateCommand()
    $cmd.CommandText = $query
    $reader = $cmd.ExecuteReader()
    try {
        while ($reader.Read()) {
            $servers += ,@($reader["HostName_Port"], $reader["GroupId"])
        }
    } finally {
        $reader.Close()
    }
    return $servers
}

# Function to invoke MongoDB Atlas API and get performance data
function Invoke-MongoDBAtlasAPI {
    param (
        [string]$GroupId,
        [string]$SourceServer,
        [PSCredential]$credential
    )
    $currentDate = Get-Date
    $startDate = $currentDate.AddDays(-1).Date
    $endDate = $currentDate.Date.AddDays(1)
    $startDateISO = $startDate.ToString("yyyy-MM-ddTHH:mm:ssZ")
    $endDateISO = $endDate.ToString("yyyy-MM-ddTHH:mm:ssZ")

    $apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/$GroupId/processes/$SourceServer/measurements?granularity=PT1H&start=$startDateISO&end=$endDateISO"
    $headers = @{
        "Accept" = "application/vnd.atlas.2023-02-01+json"
    }
    return Invoke-RestMethod -Uri $apiURL -Credential $credential -Headers $headers
}

# Function to convert JSON data to a DataTable
function Convert-JsonToDataTable {
    param (
        [psobject]$data
    )
    $dataTable = New-Object System.Data.DataTable
    $dataTable.Columns.Add("groupId", [System.String])
    $dataTable.Columns.Add("hostId", [System.String])
    $dataTable.Columns.Add("processId", [System.String])
    $dataTable.Columns.Add("name", [System.String])
    $dataTable.Columns.Add("timestamp", [System.DateTime])
    $dataTable.Columns.Add("value", [System.String])
    $dataTable.Columns.Add("units", [System.String])

    foreach ($measurement in $data.measurements) {
        $name = $measurement.name
        foreach ($dataPoint in $measurement.dataPoints) {
            $row = $dataTable.NewRow()
            $row["groupId"] = $data.groupId
            $row["hostId"] = $data.hostId
            $row["processId"] = $data.processId
            $row["name"] = $name
            $row["timestamp"] = $dataPoint.timestamp
            $row["value"] = $dataPoint.value
            $row["units"] = $dataPoint.units
            $dataTable.Rows.Add($row)
        }
    }
    return $dataTable
}

# Function to insert data into SQL server
function Insert-DataIntoSQL {
    param (
        [System.Data.DataTable]$dataTable,
        [string]$sqlServer,
        [string]$database
    )
    $sqlConnectionString = "Server=$sqlServer;Database=$database;Trusted_Connection=True;"
    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection $sqlConnectionString
    try {
        $sqlConnection.Open()
        $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy $sqlConnection
        $bulkCopy.DestinationTableName = "MongoDB.PerformanceMetrics_STG"
        $bulkCopy.BatchSize = 1000
        $bulkCopy.WriteToServer($dataTable)
    } finally {
        $sqlConnection.Close()
    }
}

# Main script
try {
    $sqlServer = "DBADWHTest"
    $database = "DBAWarehouse"

    $SQLConn = Get-SqlConnection -sqlServer $sqlServer -database $database
    try {
        $keys = Get-ApiKeys -SQLConn $SQLConn
        $username = $keys[0]
        $password = ConvertTo-SecureString $keys[1] -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential ($username, $password)

        $servers = Get-ServerInfo -SQLConn $SQLConn
        foreach ($server in $servers) {
            $SourceServer = $server[0]
            $GroupId = $server[1]

            $data = Invoke-MongoDBAtlasAPI -GroupId $GroupId -SourceServer $SourceServer -credential $credential
            $dataTable = Convert-JsonToDataTable -data $data
            Insert-DataIntoSQL -dataTable $dataTable -sqlServer $sqlServer -database $database
        }
    } finally {
        $SQLConn.Close()
    }
} catch {
    Write-Error "An error occurred: $_"
} finally {
    Write-Output "Process completed."
}
