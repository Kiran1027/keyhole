# Function to fetch Vault configuration and API keys
function Get-VaultConfigAndApiKeys {
    param (
        [string]$sqlConnectionString
    )

    # Fetch Vault configuration from SQL Server
    $query = "SELECT CertFullPath, CertServer, CertPswd, CertName, CertDesc, vaultAddress, vaultNamespace, vaultPath FROM Vault.Cert"
    $vaultVariables = @{}
    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($sqlConnectionString)
    $sqlConnection.Open()
    $sqlCommand = $sqlConnection.CreateCommand()
    $sqlCommand.CommandText = $query
    $sqlReader = $sqlCommand.ExecuteReader()

    if ($sqlReader.Read()) {
        $vaultVariables.vaultAddress = $sqlReader["vaultAddress"]
        $vaultVariables.vaultNamespace = $sqlReader["vaultNamespace"]
        $vaultVariables.vaultPath = $sqlReader["vaultPath"]
        $certPath = Join-Path -Path $sqlReader["CertFullPath"] -ChildPath $sqlReader["CertName"]
    }
    $sqlReader.Close()
    $sqlConnection.Close()

    # Authenticate with Vault using the TLS certificate
    try {
        $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
        $cert.Import($certPath, $sqlReader["CertPswd"], 'DefaultKeySet')
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        $Headers = @{
            "X-Vault-Namespace" = $vaultVariables.vaultNamespace
        }
        $Vault_key = Invoke-RestMethod -Uri "$($vaultVariables.vaultAddress)/v1/auth/cert/login" -Method Post -Certificate $cert -Headers $Headers -ContentType "application/json"
        $Clienttoken = $Vault_key.Content | ConvertFrom-Json

        $Header = @{
            "X-Vault-Namespace" = $vaultVariables.vaultNamespace
            "X-Vault-Token"     = $Clienttoken.auth.client_token
        }
        $Vault_locations = Invoke-RestMethod -Uri "$($vaultVariables.vaultAddress)$($vaultVariables.vaultPath)" -Method Get -Headers $Header -ContentType "application/json"
        $Mydata = $Vault_locations.Content | ConvertFrom-Json

        $apiKeys = @()
        foreach ($item in $Mydata.data.data) {
            $apiKeys += [PSCustomObject]@{
                Org_ID     = $item.Org_ID
                PublicKey  = $item.PublicKey
                PrivateKey = $item.PrivateKey
            }
        }
    } catch {
        Write-Error "Error fetching API keys from Vault: $_"
        return $null
    }
    return $apiKeys
}

# Remaining functions as they are in the script (Insert-ServerDataIntoSqlServer, ConvertAndInsertPerformanceData, Fetch-And-Insert-MongoDBServerData, etc.)

# Main script
try {
    $sqlConnectionString = "server=YourServerName;database=YourDatabaseName;trusted_connection=true;"
    $apiKeys = Get-VaultConfigAndApiKeys -sqlConnectionString $sqlConnectionString

    if ($apiKeys -ne $null) {
        foreach ($apiKey in $apiKeys) {
            $publicKey = $apiKey.PublicKey
            $privateKey = $apiKey.PrivateKey
            $credential = New-Object System.Management.Automation.PSCredential ($publicKey, (ConvertTo-SecureString $privateKey -AsPlainText -Force))

            # Using credential and Org_ID to perform subsequent operations
            # Implement remaining data fetching and processing based on your needs
        }
    } else {
        Write-Error "Failed to fetch API keys from Vault."
    }
} catch {
    Write-Error "An error occurred in the main script: $_"
} finally {
    Write-Output "Process completed."
}
