# Function to get SQL connection
function Get-SqlConnection {
    param (
        [string]$sqlServer,  # SQL Server name
        [string]$database    # Database name
    )
    # Create a new SQL connection object
    $SQLConn = New-Object System.Data.SqlClient.SqlConnection
    # Set the connection string
    $SQLConn.ConnectionString = "Server=$sqlServer;Database=$database;Trusted_Connection=True;"
    # Open the SQL connection
    $SQLConn.Open()
    return $SQLConn  # Return the open connection
}

# Function to get API keys for all organizations from the database
function Get-AllOrgInfo {
    param (
        [System.Data.SqlClient.SqlConnection]$SQLConn  # SQL connection object
    )
    $orgInfoList = @()  # Initialize an empty array to hold organization information
    # SQL query to fetch organization details
    $query = "SELECT OrgName, PublicKey, PrivateKey FROM MongoDB.DimOrganization WHERE Active = 1"
    $cmd = $SQLConn.CreateCommand()  # Create a SQL command
    $cmd.CommandText = $query  # Set the SQL query
    $reader = $cmd.ExecuteReader()  # Execute the query and get the reader object
    try {
        while ($reader.Read()) {
            # Create a hashtable for each organization
            $orgInfo = @{
                OrgName   = $reader["OrgName"]
                PublicKey = $reader["PublicKey"]
                PrivateKey = $reader["PrivateKey"]
            }
            # Add the hashtable to the list
            $orgInfoList += $orgInfo
        }
    } finally {
        $reader.Close()  # Ensure the reader is closed
    }
    if ($orgInfoList.Count -eq 0) {
        throw "No organization information found."  # Throw an error if no information is found
    }
    return $orgInfoList  # Return the list of organization information
}

# Function to get server information for a specific Group_ID from the database
function Get-ServerInfo {
    param (
        [System.Data.SqlClient.SqlConnection]$SQLConn,  # SQL connection object
        [string]$groupId  # Group ID to filter servers
    )
    $servers = @()  # Initialize an empty array to hold server information
    # SQL query to fetch server details for a specific Group ID
    $query = "SELECT HostName_Port, GroupId FROM MongoDB.MongoServers_STG WHERE GroupId = '$groupId'"
    $cmd = $SQLConn.CreateCommand()  # Create a SQL command
    $cmd.CommandText = $query  # Set the SQL query
    $reader = $cmd.ExecuteReader()  # Execute the query and get the reader object
    try {
        while ($reader.Read()) {
            # Add each server's information as an array to the list
            $servers += ,@($reader["HostName_Port"], $reader["GroupId"])
        }
    } finally {
        $reader.Close()  # Ensure the reader is closed
    }
    return $servers  # Return the list of servers
}

# Function to invoke MongoDB Atlas API and get performance data
function Invoke-MongoDBAtlasAPI {
    param (
        [string]$GroupId,  # Group ID for the MongoDB Atlas API
        [string]$SourceServer,  # Source server for the MongoDB Atlas API
        [PSCredential]$credential  # Credentials for the MongoDB Atlas API
    )
    # Define the time range for the API query
    $currentDate = Get-Date
    $startDate = $currentDate.AddDays(-1).Date
    $endDate = $currentDate.Date.AddDays(1)
    $startDateISO = $startDate.ToString("yyyy-MM-ddTHH:mm:ssZ")
    $endDateISO = $endDate.ToString("yyyy-MM-ddTHH:mm:ssZ")

    # Construct the API URL with the defined parameters
    $apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/$GroupId/processes/$SourceServer/measurements?granularity=PT1H&start=$startDateISO&end=$endDateISO"
    $headers = @{
        "Accept" = "application/vnd.atlas.2023-02-01+json"  # Define the Accept header for the API request
    }
    # Invoke the API and return the result
    return Invoke-RestMethod -Uri $apiURL -Credential $credential -Headers $headers
}

# Combined function to convert JSON data to DataTable and insert it into SQL Server
function ConvertAndInsertData {
    param (
        [psobject]$data,  # JSON data from the API
        [string]$sqlServer,  # SQL Server name
        [string]$database  # Database name
    )

    # Initialize a new DataTable with the required columns
    $dataTable = New-Object System.Data.DataTable
    $dataTable.Columns.Add("groupId", [System.String])
    $dataTable.Columns.Add("hostId", [System.String])
    $dataTable.Columns.Add("processId", [System.String])
    $dataTable.Columns.Add("name", [System.String])
    $dataTable.Columns.Add("timestamp", [System.DateTime])
    $dataTable.Columns.Add("value", [System.String])
    $dataTable.Columns.Add("units", [System.String])

    # Check if the 'measurements' property is present in the data
    if ($null -eq $data.measurements) {
        throw "The 'measurements' property is missing or null in the provided data."
    }

    # Iterate over each measurement in the data
    foreach ($measurement in $data.measurements) {
        $name = $measurement.name  # Get the name of the measurement
        # Iterate over each data point in the measurement
        foreach ($dataPoint in $measurement.dataPoints) {
            # Create a new row in the DataTable and populate it with the data point values
            $row = $dataTable.NewRow()
            $row["groupId"] = $data.groupId
            $row["hostId"] = $data.hostId
            $row["processId"] = $data.processId
            $row["name"] = $name
            $row["timestamp"] = [DateTime]$dataPoint.timestamp
            $row["value"] = [string]$dataPoint.value
            $row["units"] = [string]$dataPoint.units
            $dataTable.Rows.Add($row)  # Add the row to the DataTable
        }
    }

    # Create a SQL connection string and a new SQL connection object
    $sqlConnectionString = "Server=$sqlServer;Database=$database;Trusted_Connection=True;"
    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection $sqlConnectionString
    try {
        $sqlConnection.Open()  # Open the SQL connection
        $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy $sqlConnection
        $bulkCopy.DestinationTableName = "MongoDB.PerformanceMetrics_STG"  # Set the destination table for the bulk copy
        $bulkCopy.BatchSize = 1000  # Set the batch size for the bulk copy

        $bulkCopy.WriteToServer($dataTable)  # Write the DataTable to the SQL Server
    } finally {
        $sqlConnection.Close()  # Ensure the SQL connection is closed
    }
}

# Main script
try {
    $sqlServer = "DBADWHTest"  # Define the SQL Server name
    $database = "DBAWarehouse"  # Define the database name

    $SQLConn = Get-SqlConnection -sqlServer $sqlServer -database $database  # Get the SQL connection

    $allOrgInfo = Get-AllOrgInfo -SQLConn $SQLConn  # Fetch all organization information

    foreach ($orgInfo in $allOrgInfo) {  # Iterate over each organization
        $orgName = $orgInfo.OrgName
        $publicKey = $orgInfo.PublicKey
        $privateKey = $orgInfo.PrivateKey

        # Convert the private key to a secure string and create a PSCredential object
        $password = ConvertTo-SecureString $privateKey -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential ($publicKey, $password)

        # Get all projects (Group IDs) for the organization
        $projectIDs = Get-ProjectIDs -credential $credential

        if ($projectIDs -ne $null) {
            foreach ($projectID in $projectIDs) {
                $servers = Get-ServerInfo -SQLConn $SQLConn -groupId $projectID  # Fetch server info for the GroupID

                foreach ($server in $servers) {  # Iterate over each server
                    $SourceServer = $server[0]

                    $data = Invoke-MongoDBAtlasAPI -GroupId $projectID -SourceServer $SourceServer -credential $credential  # Invoke the API and fetch the data

                    ConvertAndInsertData -data $data -sqlServer $sqlServer -database $database  # Convert the JSON data to a DataTable and insert it into SQL
                }
            }
        } else {
            Write-Error "No projects found for organization $orgName."
