function Get-SqlConnection($sqlServer, $database) {
    $SQLConn = New-Object System.Data.SQLClient.SQLConnection
    $SQLConn.ConnectionString = "server=$sqlServer;database=$database;trusted_connection=true;"
    $SQLConn.Open()
    return $SQLConn
}

function Get-ApiKeys($SQLConn) {
    $PubKey = ""
    $PriKey = ""
    $SQLCmd = New-Object System.Data.SQLClient.SQLCommand
    $SQLCmd.Connection = $SQLConn
    $SQLCmd.CommandText = "SELECT PublicKey, PrivateKey FROM MongoDB.DimOrganization WHERE OrgName = 'CAPE'"
    $KeyRset = $SQLCmd.ExecuteReader()
    try {
        if ($KeyRset.Read()) {
            $PubKey = $KeyRset["PublicKey"]
            $PriKey = $KeyRset["PrivateKey"]
        } else {
            throw "No API keys found."
        }
    } finally {
        $KeyRset.Close()
        $KeyRset.Dispose()
    }
    return @($PubKey, $PriKey)
}

function Get-ServerInfo($SQLConn) {
    $SQLCmd = New-Object System.Data.SQLClient.SQLCommand
    $SQLCmd.Connection = $SQLConn
    $SQLCmd.CommandText = "SELECT HostName_Port, GroupId FROM MongoDB.MongoServers_STG"
    return $SQLCmd.ExecuteReader()
}

function Invoke-MongoDBAtlasAPI($GroupId, $SourceServer, $credential) {
    $currentDate = Get-Date
    $startDate = $currentDate.AddDays(-1).Date
    $endDate = $currentDate.Date.AddDays(1)
    $startDateISO = $startDate.ToString("yyyy-MM-ddTHH:mm:ssZ")
    $endDateISO = $endDate.ToString("yyyy-MM-ddTHH:mm:ssZ")

    $apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/$GroupId/processes/$SourceServer/measurements?granularity=PT1H&start=$startDateISO&end=$endDateISO"
    $headers = @{
        "Accept" = "application/vnd.atlas.2023-02-01+json"
    }
    return Invoke-RestMethod -Uri $apiURL -Credential $credential -Headers $headers
}

function Convert-JsonToDataTable($data) {
    $dataTable = New-Object System.Data.DataTable
    $dataTable.Columns.Add("groupId", [System.String])
    $dataTable.Columns.Add("hostId", [System.String])
    $dataTable.Columns.Add("processId", [System.String])
    $dataTable.Columns.Add("name", [System.String])
    $dataTable.Columns.Add("timestamp", [System.DateTime])
    $dataTable.Columns.Add("value", [System.String])
    $dataTable.Columns.Add("units", [System.String])

    $data.measurements | ForEach-Object {
        $name = $_.name
        $_.dataPoints | ForEach-Object {
            $row = $dataTable.NewRow()
            $row.groupId = $data.groupId
            $row.hostId = $data.hostId
            $row.processId = $data.processId
            $row.name = $name
            $row.timestamp = $_.timestamp
            $row.value = $_.value
            $row.units = $_.units
            $dataTable.Rows.Add($row) | Out-Null
        }
    }
    return $dataTable
}

function Insert-DataIntoSQL($dataTable, $sqlServer, $database) {
    $sqlConnectionString = "server=$sqlServer;database=$database;trusted_connection=true;"
    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($sqlConnectionString)
    try {
        $sqlConnection.Open()
        $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy($sqlConnection)
        $bulkCopy.DestinationTableName = "MongoDB.PerformanceMetrics_STG"
        $bulkCopy.BatchSize = 1000
        $bulkCopy.WriteToServer($dataTable)
    } finally {
        $sqlConnection.Close()
        $sqlConnection.Dispose()
    }
}

# Main script
try {
    $sqlServer = "DBADWHTest"
    $database = "DBAWarehouse"

    $SQLConn = Get-SqlConnection -sqlServer $sqlServer -database $database
    $keys = Get-ApiKeys -SQLConn $SQLConn
    $username = $keys[0]
    $password = ConvertTo-SecureString $keys[1] -AsPlainText -Force
    $credential = New-Object System.Management.Automation.PSCredential($username, $password)

    $ParamRset = Get-ServerInfo -SQLConn $SQLConn
    try {
        while ($ParamRset.Read()) {
            $SourceServer = $ParamRset["HostName_Port"]
            $GroupId = $ParamRset["GroupId"]

            $data = Invoke-MongoDBAtlasAPI -GroupId $GroupId -SourceServer $SourceServer -credential $credential
            $dataTable = Convert-JsonToDataTable -data $data
            Insert-DataIntoSQL -dataTable $dataTable -sqlServer $sqlServer -database $database
        }
    } finally {
        $ParamRset.Close()
        $ParamRset.Dispose()
    }
} catch {
    Write-Error "An error occurred: $_"
} finally {
    $SQLConn.Close()
    $SQLConn.Dispose()
    Write-Output "Process completed."
}
