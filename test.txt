Metrics Final Version :
=====================================


# Define SQL Server connection details

##$sqlServer = "LOUSQLWTS5038"  
$sqlServer = "DBADWHTest"   

$database = "DBAWarehouse"


# Create the SQL Server connection string

        $SQLConn = New-Object System.Data.SQLClient.SQLConnection
        $SQLConn.ConnectionString = "server=$sqlServer;database=$database;trusted_connection=true;" 
        $SQLConn.Open()

        $SQLCmd = New-Object System.Data.SQLClient.SQLCommand
        $SQLCmd.Connection = $SQLConn
        $SQLCmd.CommandText = "SELECT 
                HostName_Port,
                GroupId
            FROM MongoDB.MongoServers_STG 
            WHERE NodeType = 'REPLICA_PRIMARY'"
        
        $ParamRset = $SQLCmd.ExecuteReader()

        $ParamRset.Read() | Out-Null
        $SourceServer = $ParamRset[0]
        $GroupId = $ParamRset[1]

        $ParamRset.Dispose()
        $ParamRset.Close()
        $SQLCmd.Dispose()

# Fetch API Keys from DimOrganization table

        $SQLCmd = New-Object System.Data.SQLClient.SQLCommand
        $SQLCmd.Connection = $SQLConn
        $SQLCmd.CommandText = "SELECT 
                PublicKey,
                PrivateKey
            FROM MongoDB.DimOrganization 
            WHERE OrgName = 'CAPE'"
        
        $ParamRset = $SQLCmd.ExecuteReader()

        $ParamRset.Read() | Out-Null
        $PubKey = $ParamRset[0]
        $PriKey = $ParamRset[1]

        $ParamRset.Dispose()
        $ParamRset.Close()
        $SQLCmd.Dispose()


$username = "$PubKey"

$password = ConvertTo-SecureString "$PriKey" -AsPlainText -Force

$credential = New-Object System.Management.Automation.PSCredential($username, $password)

# Get the current date
$currentDate = Get-Date

# Calculate the start date (midnight of the previous day)
$startDate = $currentDate.AddDays(-1).Date

# Calculate the end date (midnight of the current day)
$endDate = $currentDate.Date.AddDays(1)

# Format the dates in ISO date format
$startDateISO = $startDate.ToString("yyyy-MM-ddTHH:mm:ssZ")
$endDateISO = $endDate.ToString("yyyy-MM-ddTHH:mm:ssZ")


$apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/$GroupId/processes/$SourceServer/measurements?granularity=PT1H&start=$startDateISO&end=$endDateISO"

$headers = @{

    "Accept" = "application/vnd.atlas.2023-02-01+json"

}

$data = Invoke-RestMethod -Uri $apiURL  -Credential $credential  -Headers $headers


    # Create a SqlConnection object
    $sqlConnectionString = "server=$sqlServer;database=$database;trusted_connection=true;"

    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($sqlConnectionString)

    # Open the SQL connection

    $sqlConnection.Open()

    # Create a DataTable to hold the data

    $dataTable = New-Object System.Data.DataTable

    $dataTable.Columns.Add("groupId", [System.String])

    $dataTable.Columns.Add("hostId", [System.String])

    $dataTable.Columns.Add("processId", [System.String])

    $dataTable.Columns.Add("name", [System.String])

     $dataTable.Columns.Add("timestamp", [System.DateTime])

    $dataTable.Columns.Add("value", [System.String])

    $dataTable.Columns.Add("units", [System.String])

   
    # Add rows to the DataTable
 
$data.measurements | ForEach-Object {

Write-host "1st for loop $name"

    $name = $_.name

    $_.dataPoints | ForEach-Object {
 
        $row = $dataTable.NewRow()

        $row.groupId = $data.groupId

        $row.hostId = $data.hostId

        $row.processId = $data.processId

        $row.name= $name

        $row.timestamp = $_.timestamp

        $row.value = $_.value

        $row.units = $_.units

        

        $dataTable.Rows.Add($row) | Out-Null
write-host "inside 2nd for loop - $data.groupId"
 
        }

        }
		

    # Create a SqlBulkCopy object

    $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy($sqlConnection)

    # Set the destination table name

    $bulkCopy.DestinationTableName = "MongoDB.PerformanceMetrics_STG"

    # Set the batch size (optional)

    $bulkCopy.BatchSize = 1000

    # Write the data to the SQL Server table

    $bulkCopy.WriteToServer($dataTable)

    # Close the SQL connection

    $sqlConnection.Close()

    Write-Output "Data inserted into SQL Server table successfully."
	

   $SQLConn.Close()
   $SQLConn.Dispose()
   $sqlConnection.Dispose()



Servers Final version:
===========================================


# Function to insert data into SQL Server table using SqlBulkCopy
function Insert-DataIntoSqlServer {
    param (
        [string]$sqlConnectionString,
        [object]$data
    )

    # Create a SqlConnection object
    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($sqlConnectionString)

    # Open the SQL connection
    $sqlConnection.Open()

    # Create a DataTable to hold the data
    $dataTable = New-Object System.Data.DataTable
    $dataTable.Columns.Add("hostname_port", [System.String])
    $dataTable.Columns.Add("projectId", [System.String])
    $dataTable.Columns.Add("replicaSetName", [System.String])
    $dataTable.Columns.Add("nodeType", [System.String])
    $dataTable.Columns.Add("version", [System.String])
    $dataTable.Columns.Add("clusterCreated", [System.DateTime])


    # Add rows to the DataTable
    $data.results | ForEach-Object {
        $row = $dataTable.NewRow()
        $row["hostname_port"] = $_.id
        $row["projectId"] = $_.groupId
        $row["replicaSetName"] = $_.replicaSetName
        $row["nodeType"] = $_.typeName
        $row["version"] = $_.version
        $row["clusterCreated"] = [datetime]$_.created
        $dataTable.Rows.Add($row) | Out-Null
    }

    # Create a SqlBulkCopy object
    $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy($sqlConnection)

    # Set the destination table name
    $bulkCopy.DestinationTableName = "MongoDB.MongoServers_STG"

    # Set the batch size (optional)
    $bulkCopy.BatchSize = 1000

    # Write the data to the SQL Server table
    $bulkCopy.WriteToServer($dataTable)

    # Close the SQL connection
    $sqlConnection.Close()

    Write-Output "Data inserted into SQL Server table successfully."
}

# Define SQL Server connection details
$sqlServer = "LOUSQLWTS5038"
$database = "DBAWarehouse"


# Fetch API Keys from DimOrganization table

        $SQLConn = New-Object System.Data.SQLClient.SQLConnection
        $SQLConn.ConnectionString = "server=$sqlServer;database=$database;trusted_connection=true;"
        $SQLConn.Open()


        $SQLCmd = New-Object System.Data.SQLClient.SQLCommand
        $SQLCmd.Connection = $SQLConn
        $SQLCmd.CommandText = "SELECT 
                PublicKey,
                PrivateKey
            FROM MongoDB.DimOrganization 
            WHERE OrgName = 'CAPE'"
        
        $ParamRset = $SQLCmd.ExecuteReader()

        $ParamRset.Read() | Out-Null
        $PubKey = $ParamRset[0]
        $PriKey = $ParamRset[1]

        $ParamRset.Dispose()
        $ParamRset.Close()
        $SQLCmd.Dispose()

# truncate staging table

$SQLCmd = New-Object System.Data.SQLClient.SQLCommand
        $SQLCmd.Connection = $SQLConn
        $SQLCmd.CommandText = "truncate table MongoDB.MongoServers_STG"
        $SQLCmd.ExecuteNonQuery() | Out-Null 
        $SQLCmd.Dispose()
        $SQLConn.Close()
        $SQLConn.Dispose()

$username = "$PubKey"
$password = ConvertTo-SecureString "$PriKey" -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential($username, $password)

$apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/65df72430687e550b470053d/processes"
$headers = @{
    "Accept" = "application/vnd.atlas.2023-02-01+json"
}
$jsonData = Invoke-RestMethod -Uri $apiURL  -Credential $credential  -Headers $headers

# Create the SQL Server connection string
$sqlConnectionString = "server=$sqlServer;database=$database;trusted_connection=true;"

# Insert data into SQL Server table using bulk copy
Insert-DataIntoSqlServer -sqlConnectionString $sqlConnectionString -data $jsonData




