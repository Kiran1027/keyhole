# Function to insert server data into SQL Server table using SqlBulkCopy
function Insert-ServerDataIntoSqlServer {
    param (
        [string]$sqlConnectionString,
        [object]$data
    )

    try {
        # Create a SqlConnection object
        $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($sqlConnectionString)
        
        # Open the SQL connection
        $sqlConnection.Open()
        
        # Create a DataTable to hold the data
        $dataTable = New-Object System.Data.DataTable
        $dataTable.Columns.Add("hostname_port", [System.String])
        $dataTable.Columns.Add("projectId", [System.String])
        $dataTable.Columns.Add("replicaSetName", [System.String])
        $dataTable.Columns.Add("nodeType", [System.String])
        $dataTable.Columns.Add("version", [System.String])
        $dataTable.Columns.Add("clusterCreated", [System.DateTime])
        
        # Add rows to the DataTable
        $data.results | ForEach-Object {
            $row = $dataTable.NewRow()
            $row["hostname_port"] = $_.id
            $row["projectId"] = $_.groupId
            $row["replicaSetName"] = $_.replicaSetName
            $row["nodeType"] = $_.typeName
            $row["version"] = $_.version
            $row["clusterCreated"] = [datetime]$_.created
            $dataTable.Rows.Add($row) | Out-Null
        }
        
        # Create a SqlBulkCopy object
        $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy($sqlConnection)
        
        # Set the destination table name
        $bulkCopy.DestinationTableName = "MongoDB.MongoServers_STG"
        
        # Set the batch size (optional)
        $bulkCopy.BatchSize = 1000
        
        # Write the data to the SQL Server table
        $bulkCopy.WriteToServer($dataTable)
        
        Write-Output "Server data inserted into SQL Server table successfully."
    } catch {
        Write-Error "An error occurred while inserting server data into SQL Server: $_"
    } finally {
        # Close the SQL connection
        if ($sqlConnection.State -eq [System.Data.ConnectionState]::Open) {
            $sqlConnection.Close()
        }
    }
}

# Function to insert performance data into SQL Server table using SqlBulkCopy
function ConvertAndInsertPerformanceData {
    param (
        [psobject]$data,  # JSON data from the API
        [string]$sqlServer,  # SQL Server name
        [string]$database  # Database name
    )

    # Initialize a new DataTable with the required columns
    $dataTable = New-Object System.Data.DataTable
    $dataTable.Columns.Add("groupId", [System.String])
    $dataTable.Columns.Add("hostId", [System.String])
    $dataTable.Columns.Add("processId", [System.String])
    $dataTable.Columns.Add("name", [System.String])
    $dataTable.Columns.Add("timestamp", [System.DateTime])
    $dataTable.Columns.Add("value", [System.String])
    $dataTable.Columns.Add("units", [System.String])

    # Check if the 'measurements' property is present in the data
    if ($null -eq $data.measurements) {
        throw "The 'measurements' property is missing or null in the provided data."
    }

    # Iterate over each measurement in the data
    foreach ($measurement in $data.measurements) {
        $name = $measurement.name  # Get the name of the measurement
        # Iterate over each data point in the measurement
        foreach ($dataPoint in $measurement.dataPoints) {
            # Create a new row in the DataTable and populate it with the data point values
            $row = $dataTable.NewRow()
            $row["groupId"] = $data.groupId
            $row["hostId"] = $data.hostId
            $row["processId"] = $data.processId
            $row["name"] = $name
            $row["timestamp"] = [DateTime]$dataPoint.timestamp
            $row["value"] = [string]$dataPoint.value
            $row["units"] = [string]$dataPoint.units
            $dataTable.Rows.Add($row)  # Add the row to the DataTable
        }
    }

    # Create a SQL connection string and a new SQL connection object
    $sqlConnectionString = "Server=$sqlServer;Database=$database;Trusted_Connection=True;"
    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection $sqlConnectionString
    try {
        $sqlConnection.Open()  # Open the SQL connection
        $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy $sqlConnection
        $bulkCopy.DestinationTableName = "MongoDB.PerformanceMetrics_STG"  # Set the destination table for the bulk copy
        $bulkCopy.BatchSize = 1000  # Set the batch size for the bulk copy

        $bulkCopy.WriteToServer($dataTable)  # Write the DataTable to the SQL Server
    } finally {
        $sqlConnection.Close()  # Ensure the SQL connection is closed
    }
}

# Function to fetch API keys from DimOrganization table
function Get-ApiKeys {
    param (
        [string]$sqlConnectionString
    )

    try {
        # Create a SQL connection
        $SQLConn = New-Object System.Data.SQLClient.SQLConnection
        $SQLConn.ConnectionString = $sqlConnectionString
        $SQLConn.Open()

        # Create a SQL command
        $SQLCmd = New-Object System.Data.SQLClient.SQLCommand
        $SQLCmd.Connection = $SQLConn
        $SQLCmd.CommandText = @"
            SELECT Org_ID, PublicKey, PrivateKey
            FROM MongoDB.DimOrganization
            WHERE Active = 1
"@
        # Execute the command and fetch the results
        $ParamRset = $SQLCmd.ExecuteReader()
        
        $apiKeys = @()
        
        while ($ParamRset.Read()) {
            $apiKeys += [PSCustomObject]@{
                Org_ID     = $ParamRset["Org_ID"]
                PublicKey  = $ParamRset["PublicKey"]
                PrivateKey = $ParamRset["PrivateKey"]
            }
        }
        
        return $apiKeys
    } catch {
        Write-Error "An error occurred while fetching API keys: $_"
        return $null
    } finally {
        # Close the SQL connection
        if ($SQLConn.State -eq [System.Data.ConnectionState]::Open) {
            $SQLConn.Close()
        }
    }
}

# Function to fetch MongoDB Atlas server data and insert into SQL Server
function Fetch-And-Insert-MongoDBServerData {
    param (
        [PSCredential]$credential,
        [string]$groupId,
        [string]$sqlConnectionString
    )

    try {
        $apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/$groupId/processes"
        $headers = @{
            "Accept" = "application/vnd.atlas.2023-02-01+json"
        }

        $jsonData = Invoke-RestMethod -Uri $apiURL -Credential $credential -Headers $headers

        # Insert data into SQL Server table using bulk copy
        Insert-ServerDataIntoSqlServer -sqlConnectionString $sqlConnectionString -data $jsonData
    } catch {
        Write-Error "An error occurred while fetching or inserting MongoDB server data: $_"
    }
}

# Function to get all projects for an organization
function Get-ProjectIDs {
    param (
        [PSCredential]$credential
    )

    try {
        $apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups"
        $headers = @{
            "Accept" = "application/vnd.atlas.2023-02-01+json"
        }

        $projectsData = Invoke-RestMethod -Uri $apiURL -Credential $credential -Headers $headers

        return $projectsData.results | Select-Object -ExpandProperty id
    } catch {
        Write-Error "An error occurred while fetching project IDs: $_"
        return $null
    }
}

# Function to get server information for a specific Group_ID from the database
function Get-ServerInfo {
    param (
        [System.Data.SqlClient.SqlConnection]$SQLConn,  # SQL connection object
        [string]$groupId  # Group ID to filter servers
    )
    $servers = @()  # Initialize an empty array to hold server information
    # SQL query to fetch server details for a specific Group ID
    $query = "SELECT HostName_Port, GroupId FROM MongoDB.MongoServers_STG WHERE GroupId = '$groupId'"
    $cmd = $SQLConn.CreateCommand()  # Create a SQL command
    $cmd.CommandText = $query  # Set the SQL query
    $reader = $cmd.ExecuteReader()  # Execute the query and get the reader object
    try {
        while ($reader.Read()) {
            # Add each server's information as an array to the list
            $servers += ,@($reader["HostName_Port"], $reader["GroupId"])
        }
    } finally {
        $reader.Close()  # Ensure the reader is closed
    }
    return $servers  # Return the list of servers
}

# Function to invoke MongoDB Atlas API and get performance data
function Invoke-MongoDBAtlasAPI {
    param (
        [string]$GroupId,  # Group ID for the MongoDB Atlas API
        [string]$SourceServer,  # Source server for the MongoDB Atlas API
        [PSCredential]$credential  # Credentials for the MongoDB Atlas API
    )
    # Define the time range for the API query
    $currentDate = Get-Date
    $startDate = $currentDate.AddDays(-1).Date
    $endDate = $currentDate.Date.AddDays(1)
    $startDateISO = $startDate.ToString("yyyy-MM-ddTHH:mm:ssZ")
    $endDateISO = $endDate.ToString("yyyy-MM-ddTHH:mm:ssZ")

    # Construct the API URL with the defined parameters
    $apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/$GroupId/processes/$SourceServer/measurements?granularity=PT1H&start=$startDateISO&end=$endDateISO"
    $headers = @{
        "Accept" = "application/vnd.atlas.2023-02-01+json"  # Define the Accept header for the API request
    }
    # Invoke the API and return the result
    return Invoke-RestMethod -Uri $apiURL -Credential $credential -Headers $headers
}

# Main script
try {
    $sqlServer = "DBADWHTest"  # Define the SQL Server name
    $database = "DBAWarehouse"  # Define the database name
    $sqlConnectionString = "server=$sqlServer;database=$database;trusted_connection=true;"

    # Get the SQL connection
    $SQLConn = New-Object System.Data.SqlClient.SqlConnection
    $SQLConn.ConnectionString = $sqlConnectionString
    $SQLConn.Open()

    # Fetch API Keys from DimOrganization table
    $apiKeys = Get-ApiKeys -sqlConnectionString $sqlConnectionString

    if ($apiKeys -ne $null) {
        foreach ($apiKey in $apiKeys) {
            $username = $apiKey.PublicKey
            $password = ConvertTo-SecureString $apiKey.PrivateKey -AsPlainText -Force
            $credential = New-Object System.Management.Automation.PSCredential($username, $password)

            # Get all project IDs for the organization
            $projectIDs = Get-ProjectIDs -credential $credential

            if ($projectIDs -ne $null) {
                foreach ($projectID in $projectIDs) {
                    # Fetch and insert MongoDB server data
                    Fetch-And-Insert-MongoDBServerData -credential $credential -groupId $projectID -sqlConnectionString $sqlConnectionString

                    # Fetch server info for the GroupID
                    $servers = Get-ServerInfo -SQLConn $SQLConn -groupId $projectID

                    foreach ($server in $servers) {  # Iterate over each server
                        $SourceServer = $server[0]

                        # Invoke the API and fetch the performance data
                        $data = Invoke-MongoDBAtlasAPI -GroupId $projectID -SourceServer $SourceServer -credential $credential

                        # Convert the JSON data to a DataTable and insert it into SQL
                        ConvertAndInsertPerformanceData -data $data -sqlServer $sqlServer -database $database
                    }
                }
            } else {
                Write-Error "No projects found for organization with PublicKey $username."
            }
        }
    } else {
        Write-Error "No active organizations found in the DimOrganization table."
    }
} catch {
    Write-Error "An error occurred: $_"  # Catch and log any errors
} finally {
    if ($SQLConn -and $SQLConn.State -eq 'Open') { $SQLConn.Close() }  # Ensure the SQL connection is closed
    Write-Output "Process completed."  # Log that the process is completed
}
