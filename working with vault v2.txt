# Function to insert server data into SQL Server table using SqlBulkCopy
function Insert-ServerDataIntoSqlServer {
    param (
        [string]$sqlConnectionString,
        [object]$data
    )

    try {
        $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($sqlConnectionString)
        $sqlConnection.Open()

        $dataTable = New-Object System.Data.DataTable
        $dataTable.Columns.Add("hostname_port", [System.String])
        $dataTable.Columns.Add("projectId", [System.String])
        $dataTable.Columns.Add("replicaSetName", [System.String])
        $dataTable.Columns.Add("nodeType", [System.String])
        $dataTable.Columns.Add("version", [System.String])
        $dataTable.Columns.Add("clusterCreated", [System.DateTime])

        $data.results | ForEach-Object {
            $row = $dataTable.NewRow()
            $row["hostname_port"] = $_.id
            $row["projectId"] = $_.groupId
            $row["replicaSetName"] = $_.replicaSetName
            $row["nodeType"] = $_.typeName
            $row["version"] = $_.version
            $row["clusterCreated"] = [datetime]$_.created
            $dataTable.Rows.Add($row) | Out-Null
        }

        $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy($sqlConnection)
        $bulkCopy.DestinationTableName = "MongoDB.MongoServers_STG"
        $bulkCopy.BatchSize = 1000
        $bulkCopy.WriteToServer($dataTable)
        
        Write-Output "Server data inserted into SQL Server table successfully."
    } catch {
        Write-ErrorLog -ErrMsg $_.Exception.Message -TargetServer "DBADWHTest" -CollectorName "Insert-ServerDataIntoSqlServer" -LogServer "DBADWHTest" -LogDatabase "DBAWarehouse"
        throw $_
    } finally {
        if ($sqlConnection.State -eq [System.Data.ConnectionState]::Open) {
            $sqlConnection.Close()
        }
    }
}

# Function to insert performance data into SQL Server table using SqlBulkCopy
function ConvertAndInsertPerformanceData {
    param (
        [psobject]$data,
        [string]$sqlServer,
        [string]$database
    )

    try {
        $dataTable = New-Object System.Data.DataTable
        $dataTable.Columns.Add("groupId", [System.String])
        $dataTable.Columns.Add("hostId", [System.String])
        $dataTable.Columns.Add("processId", [System.String])
        $dataTable.Columns.Add("name", [System.String])
        $dataTable.Columns.Add("timestamp", [System.DateTime])
        $dataTable.Columns.Add("value", [System.String])
        $dataTable.Columns.Add("units", [System.String])

        if ($null -eq $data.measurements) {
            throw "The 'measurements' property is missing or null in the provided data."
        }

        foreach ($measurement in $data.measurements) {
            foreach ($dataPoint in $measurement.dataPoints) {
                $row = $dataTable.NewRow()
                $row["groupId"] = $data.groupId
                $row["hostId"] = $data.hostId
                $row["processId"] = $data.processId
                $row["name"] = $measurement.name
                $row["timestamp"] = [DateTime]$dataPoint.timestamp
                $row["value"] = [string]$dataPoint.value
                $row["units"] = [string]$dataPoint.units
                $dataTable.Rows.Add($row)
            }
        }

        $sqlConnectionString = "Server=$sqlServer;Database=$database;Trusted_Connection=True;"
        $sqlConnection = New-Object System.Data.SqlClient.SqlConnection $sqlConnectionString
        $sqlConnection.Open()

        $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy $sqlConnection
        $bulkCopy.DestinationTableName = "MongoDB.PerformanceMetrics_STG"
        $bulkCopy.BatchSize = 1000
        $bulkCopy.WriteToServer($dataTable)
    } catch {
        Write-ErrorLog -ErrMsg $_.Exception.Message -TargetServer $sqlServer -CollectorName "ConvertAndInsertPerformanceData" -LogServer "DBADWHTest" -LogDatabase "DBAWarehouse"
        throw $_
    } finally {
        if ($sqlConnection.State -eq 'Open') { $sqlConnection.Close() }
    }
}

# Function to fetch Vault configuration and API keys from SQL Server and Vault
function Get-VaultConfigAndApiKeys {
    param (
        [string]$sqlConnectionString
    )

    try {
        $query = "SELECT CertFullPath, CertServer, CertPswd, CertName, CertDesc, vaultAddress, vaultNamespace, vaultPath FROM Vault.Cert"
        $vaultVariables = @{}
        $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($sqlConnectionString)
        $sqlConnection.Open()
        $sqlCommand = $sqlConnection.CreateCommand()
        $sqlCommand.CommandText = $query
        $sqlReader = $sqlCommand.ExecuteReader()

        if ($sqlReader.Read()) {
            $vaultVariables.vaultAddress = $sqlReader["vaultAddress"]
            $vaultVariables.vaultNamespace = $sqlReader["vaultNamespace"]
            $vaultVariables.vaultPath = $sqlReader["vaultPath"]
            $certPath = Join-Path -Path $sqlReader["CertFullPath"] -ChildPath $sqlReader["CertName"]
            $certPassword = $sqlReader["CertPswd"]
        }
        $sqlReader.Close()
        $sqlConnection.Close()

        # Authenticate with Vault using the TLS certificate
        $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
        $cert.Import($certPath, $certPassword, 'DefaultKeySet')
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

        $Headers = @{ "X-Vault-Namespace" = $vaultVariables.vaultNamespace }
        $Vault_key = Invoke-RestMethod -Uri "$($vaultVariables.vaultAddress)/auth/cert/login" -Method Post -Certificate $cert -Headers $Headers -ContentType "application/json"
        $Clienttoken = $Vault_key.auth.client_token

        $Headers = @{
            "Accept" = "application/json"
            "X-Vault-Namespace" = $vaultVariables.vaultNamespace
            "X-Vault-Token" = $Clienttoken
        }

        $uri = "$($vaultVariables.vaultAddress)/$($vaultVariables.vaultPath)"
        $Vault_locations = Invoke-RestMethod -Method Get -Headers $Headers -Uri $uri
        $Mydata = $Vault_locations.data.data

        $apiKeys = @()
        $apiKeys += [PSCustomObject]@{
            Org_ID = $Mydata.Org_ID
            PublicKey = $Mydata.PublicKey
            PrivateKey = $Mydata.PrivateKey
        }

        return $apiKeys
    } catch {
        Write-ErrorLog -ErrMsg $_.Exception.Message -TargetServer "DBADWHTest" -CollectorName "Get-VaultConfigAndApiKeys" -LogServer "DBADWHTest" -LogDatabase "DBAWarehouse"
        throw $_
    }
}

# Function to fetch MongoDB Atlas server data and insert into SQL Server
function Fetch-And-Insert-MongoDBServerData {
    param (
        [PSCredential]$credential,
        [string]$groupId,
        [string]$sqlConnectionString
    )

    try {
        $apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/$groupId/processes"
        $headers = @{ "Accept" = "application/vnd.atlas.2023-02-01+json" }

        $jsonData = Invoke-RestMethod -Uri $apiURL -Credential $credential -Headers $headers

        Insert-ServerDataIntoSqlServer -sqlConnectionString $sqlConnectionString -data $jsonData
    } catch {
        Write-ErrorLog -ErrMsg $_.Exception.Message -TargetServer "DBADWHTest" -CollectorName "Fetch-And-Insert-MongoDBServerData" -LogServer "DBADWHTest" -LogDatabase "DBAWarehouse"
        throw $_
    }
}

# Function to get all projects for an organization
function Get-ProjectIDs {
    param (
        [PSCredential]$credential
    )

    try {
        $apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups"
        $headers = @{ "Accept" = "application/vnd.atlas.2023-02-01+json" }

        $projectsData = Invoke-RestMethod -Uri $apiURL -Credential $credential -Headers $headers

        return $projectsData.results | Select-Object -ExpandProperty id
    } catch {
        Write-ErrorLog -ErrMsg $_.Exception.Message -TargetServer "DBADWHTest" -CollectorName "Get-ProjectIDs" -LogServer "DBADWHTest" -LogDatabase "DBAWarehouse"
        throw $_
    }
}

# Function to get server information for a specific Group_ID from the database
function Get-ServerInfo {
    param (
        [System.Data.SqlClient.SqlConnection]$SQLConn,
        [string]$groupId
    )

    try {
        $servers = @()
        $query = "SELECT HostName_Port, GroupId FROM MongoDB.MongoServers_STG WHERE GroupId = '$groupId'"
        $cmd = $SQLConn.CreateCommand()
        $cmd.CommandText = $query
        $reader = $cmd.ExecuteReader()

        while ($reader.Read()) {
            $servers += ,@($reader["HostName_Port"], $reader["GroupId"])
        }
        return $servers
    } catch {
        Write-ErrorLog -ErrMsg $_.Exception.Message -TargetServer "DBADWHTest" -CollectorName "Get-ServerInfo" -LogServer "DBADWHTest" -LogDatabase "DBAWarehouse"
        throw $_
    } finally {
        $reader.Close()
    }
}

# Function to invoke MongoDB Atlas API and get performance data
function Invoke-MongoDBAtlasAPI {
    param (
        [string]$GroupId,
        [string]$SourceServer,
        [PSCredential]$credential
    )

    try {
        $currentDate = Get-Date
        $startDate = $currentDate.AddDays(-1).Date
        $endDate = $currentDate.Date.AddDays(1)
        $startDateISO = $startDate.ToString("yyyy-MM-ddTHH:mm:ssZ")
        $endDateISO = $endDate.ToString("yyyy-MM-ddTHH:mm:ssZ")

        $apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/$GroupId/processes/$SourceServer/measurements?granularity=PT1H&start=$startDateISO&end=$endDateISO"
        $headers = @{ "Accept" = "application/vnd.atlas.2023-02-01+json" }

        return Invoke-RestMethod -Uri $apiURL -Credential $credential -Headers $headers
    } catch {
        Write-ErrorLog -ErrMsg $_.Exception.Message -TargetServer "DBADWHTest" -CollectorName "Invoke-MongoDBAtlasAPI" -LogServer "DBADWHTest" -LogDatabase "DBAWarehouse"
        throw $_
    }
}

# Function to log errors into SQL Server
function Write-ErrorLog {
    param (
        [String]$ErrMsg,
        [String]$TargetServer,
        [String]$CollectorName,
        [String]$LogServer,
        [String]$LogDatabase
    )
    try {
        [String]$ErrMsg2 = $ErrMsg.SubString(0, [math]::min(2000, $ErrMsg.length)).Replace("'", "")
        $SQLStrErr = @"
            INSERT INTO [CollectorEngine].[PowershellLoad_Error] 
            (CollectorName, ServerName, DatabaseName, LoadName, ErrorMessage, SQLString, ErrorDt)
            VALUES 
            ('$CollectorName', '$TargetServer', NULL, 'MongoDB Load', '$ErrMsg2', NULL, GETDATE())
"@
        invoke-sqlcmd -serverinstance $LogServer -database $LogDatabase -query $SQLStrErr -connectiontimeout 60 -querytimeout 600 -trustservercertificate
    } catch {
        [String]$ErrMsg = $Error.Exception.Message
        [String]$ErrMsg2 = $ErrMsg.SubString(0, [math]::min(2000, $ErrMsg.length)).Replace("'", "")
        throw $("Error in Server - " + $TargetServer + " Error: " + $ErrMsg2)
    }
}

# Main script
try {
    $sqlServer = "DBADWHTest"
    $database = "DBAWarehouse"
    $LogServer = "DBADWHTest"
    $LogDatabase = "DBAWarehouse"
    $sqlConnectionString = "server=$sqlServer;database=$database;trusted_connection=true;"
    
    $SQLConn = New-Object System.Data.SqlClient.SqlConnection
    $SQLConn.ConnectionString = $sqlConnectionString
    $SQLConn.Open()

    $apiKeys = Get-VaultConfigAndApiKeys -sqlConnectionString $sqlConnectionString

    if ($apiKeys -ne $null) {
        foreach ($apiKey in $apiKeys) {
            $username = $apiKey.PublicKey
            $password = ConvertTo-SecureString $apiKey.PrivateKey -AsPlainText -Force
            $credential = New-Object System.Management.Automation.PSCredential($username, $password)
            
            try {
                $projectIDs = Get-ProjectIDs -credential $credential
                foreach ($projectID in $projectIDs) {
                    Fetch-And-Insert-MongoDBServerData -credential $credential -groupId $projectID -sqlConnectionString $sqlConnectionString

                    $servers = Get-ServerInfo -SQLConn $SQLConn -groupId $projectID
                    foreach ($server in $servers) {
                        $SourceServer = $server[0]
                        $data = Invoke-MongoDBAtlasAPI -GroupId $projectID -SourceServer $SourceServer -credential $credential
                        ConvertAndInsertPerformanceData -data $data -sqlServer $sqlServer -database $database
                    }
                }
            } catch {
                Write-ErrorLog -ErrMsg $_.Exception.Message -TargetServer $sqlServer -CollectorName "Project Loop" -LogServer $LogServer -LogDatabase $LogDatabase
                throw $_
            }
        }
    } else {
        Write-ErrorLog -ErrMsg "No active organizations found" -TargetServer $sqlServer -CollectorName "Main Script" -LogServer $LogServer -LogDatabase $LogDatabase
    }
} catch {
    Write-ErrorLog -ErrMsg $_.Exception.Message -TargetServer $sqlServer -CollectorName "Main Script" -LogServer $LogServer -LogDatabase $LogDatabase
    throw $_
} finally {
    if ($SQLConn.State -eq 'Open') { $SQLConn.Close() }
    Write-Output "Process completed."
}
