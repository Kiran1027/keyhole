# JSON data
$json = @"
{
    "end":  "2024-04-10T15:22:14Z",
    "granularity":  "PT1000H",
    "groupId":  "656639f67f8edf7a8e1062ce",
    "hostId":  "atlas-z9idw7-shard-00-02.xwl4k.mongodb.net:27017",
    "links":  [
                  {
                      "href":  "https://cloud.mongodb.com/api/atlas/v2/groups/656639f67f8edf7a8e1062ce/processes/atlas-z9idw7-shard-00-02.xwl4k.mongodb.net:27017/measurements?granularity=PT1000H\u0026start=2024-04-10T00:00:00Z\u0026end=2024-04-11T00:00:00Z",
                      "rel":  "self"
                  },
                  {
                      "href":  "https://cloud.mongodb.com/api/atlas/v2/groups/656639f67f8edf7a8e1062ce/processes/atlas-z9idw7-shard-00-02.xwl4k.mongodb.net:27017",
                      "rel":  "https://cloud.mongodb.com/host"
                  }
              ],
    "measurements":  [
                         
                         {
                             "dataPoints":  [
                                                {
                                                    "timestamp":  "2024-04-10T15:22:14Z",
                                                    "value":  null
                                                }
                                            ],
                             "name":  "CACHE_BYTES_WRITTEN_FROM",
                             "units":  "BYTES_PER_SECOND"
                         },
                         {
                             "dataPoints":  [
                                                {
                                                    "timestamp":  "2024-04-10T15:22:14Z",
                                                    "value":  2993213.0
                                                }
                                            ],
                             "name":  "CACHE_DIRTY_BYTES",
                             "units":  "BYTES"
                         },
                         {
                             "dataPoints":  [
                                                {
                                                    "timestamp":  "2024-04-10T15:22:14Z",
                                                    "value":  29537321
                                                }
                                            ],
                             "name":  "CACHE_USED_BYTES",
                             "units":  "BYTES"
                         },
                         {
                             "dataPoints":  [
                                                {
                                                    "timestamp":  "2024-04-10T15:22:14Z",
                                                    "value":  56.0
                                                }
                                            ],
                             "name":  "CONNECTIONS",
                             "units":  "SCALAR"
                         },
                         {
                             "dataPoints":  [
                                                {
                                                    "timestamp":  "2024-04-10T15:22:14Z",
                                                    "value":  2.0
                                                }
                                            ],
                             "name":  "CURSORS_TOTAL_OPEN",
                             "units":  "SCALAR"
                         },
                         {
                             "dataPoints":  [
                                                {
                                                    "timestamp":  "2024-04-10T15:22:14Z",
                                                    "value":  null
                                                }
                                            ],
                             "name":  "CURSORS_TOTAL_TIMED_OUT",
                             "units":  "SCALAR_PER_SECOND"
                         },
                         ...
                     ],
    "processId":  "atlas-z9idw7-shard-00-02.xwl4k.mongodb.net:27017",
    "start":  "2024-04-10T15:21:51Z"
}
"@

# Convert JSON to PowerShell object
$object = ConvertFrom-Json $json

# Define SQL Server connection details
$server = "your_server_name"
$database = "your_database_name"
$table = "MongoDBMeasurements"
$connectionString = "Server=$server;Database=$database;Integrated Security=True"
$connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)

# Define SQL command to create table
$createTableQuery = @"
CREATE TABLE $table (
    groupId VARCHAR(255),
    hostId VARCHAR(255),
    processId VARCHAR(255),
    name VARCHAR(255),
    timestamp DATETIME,
    value FLOAT,
    units VARCHAR(255)
)
"@

# Execute SQL command to create table
$command = New-Object System.Data.SqlClient.SqlCommand($createTableQuery, $connection)
$connection.Open()
$command.ExecuteNonQuery()
$connection.Close()

# Define SQL command to insert data
$insertQuery = "INSERT INTO $table (groupId, hostId, processId, name, timestamp, value, units) VALUES"

# Loop through JSON measurements and build insert queries
foreach ($measurement in $object.measurements) {
    $timestamp = Get-Date $measurement.dataPoints[0].timestamp -Format "yyyy-MM-dd HH:mm:ss"
    $values = "('"+$object.groupId+"','"+$object.hostId+"','"+$object.processId+"','"+$measurement.name+"','"+$timestamp+"',"+$measurement.dataPoints[0].value+",'"+$measurement.units+"')"
    $insertQuery += " " + $values + ","
}

# Remove trailing comma
$insertQuery = $insertQuery.TrimEnd(',')

# Execute SQL command to insert data
$command = New-Object System.Data.SqlClient.SqlCommand($insertQuery, $connection)
$connection.Open()
$command.ExecuteNonQuery()
$connection.Close()

Write-Host "Data inserted into SQL Server table successfully."





=======================================================================================


Second script write to CSV:

# Convert JSON to PowerShell object
$data = ConvertFrom-Json $jsonString

# Define CSV file path
$csvFilePath = "measurement_data.csv"

# Create an empty CSV file with headers
Add-Content -Path $csvFilePath -Value "groupId,hostId,processId,name,timestamp,value,units"

# Output INSERT INTO statements
$data.measurements | ForEach-Object {
    $name = $_.name
    $_.dataPoints | ForEach-Object {
        $groupId = $data.groupId
        $hostId = $data.hostId
        $processId = $data.processId
        $timestamp = $_.timestamp
        $value = $_.value
        $units = $_.units

        # Append data to CSV file
        Add-Content -Path $csvFilePath -Value "$groupId,$hostId,$processId,$name,$timestamp,$value,$units"
    }
}

=====================================================================================================================


Write in to SQL Server table:


$json = @"
<your JSON data here>
"@

# Convert JSON to PowerShell object
$data = ConvertFrom-Json $json

# Output SQL CREATE TABLE statement
$sql = @"
CREATE TABLE Measurement (
    groupId VARCHAR(255),
    hostId VARCHAR(255),
    processId VARCHAR(255),
    name VARCHAR(255),
    timestamp DATETIME,
    value FLOAT,
    units VARCHAR(255)
);
"@

# Output INSERT INTO statements
$data.measurements | ForEach-Object {
    $name = $_.name
    $_.dataPoints | ForEach-Object {
        $timestamp = $_.timestamp
        $value = $_.value
        $units = $_.units

        $sql += @"
INSERT INTO Measurement (groupId, hostId, processId, name, timestamp, value, units)
VALUES ('$($data.groupId)', '$($data.hostId)', '$($data.processId)', '$name', '$timestamp', $value, '$units');
"@
    }
}

# Output the SQL script
$sql

===========================================================================================================================

Write to QL Serevr table using HashiCorp vault


# Load required modules
Import-Module VaultSharp
Import-Module SqlServer

# Define the SQL Server connection details
$SqlServerUri = "<HashiCorp Vault SQL Server URI>"
$VaultToken = "<HashiCorp Vault token>"
$SecretPath = "<HashiCorp Vault secret path>"

# Initialize the Vault client
$vaultClient = New-Object VaultSharp.VaultClient.VaultClient -ArgumentList "<HashiCorp Vault address>"
$vaultClient.AuthenticateWithToken($VaultToken)

# Retrieve the SQL Server connection details from HashiCorp Vault
$SqlServerDetails = $vaultClient.Secret.Read($SecretPath).Data

# Create the SQL Server connection string
$SqlConnectionString = "Server=$($SqlServerDetails.Server);Database=$($SqlServerDetails.Database);User Id=$($SqlServerDetails.Username);Password=$($SqlServerDetails.Password)"

# Define the JSON data
$json = @"
<your JSON data here>
"@

# Convert JSON to PowerShell object
$data = ConvertFrom-Json $json

# Create a SqlConnection object
$sqlConnection = New-Object System.Data.SqlClient.SqlConnection($SqlConnectionString)

# Open the SQL connection
$sqlConnection.Open()

# Define the SQL query to insert data into the table
$sqlInsertQuery = "INSERT INTO Measurement (groupId, hostId, processId, name, timestamp, value, units) VALUES (@groupId, @hostId, @processId, @name, @timestamp, @value, @units)"

# Create a SqlCommand object
$sqlCommand = $sqlConnection.CreateCommand()
$sqlCommand.CommandText = $sqlInsertQuery

# Iterate over the measurements in the JSON and insert data into the SQL table
$data.measurements | ForEach-Object {
    $name = $_.name
    $_.dataPoints | ForEach-Object {
        $sqlCommand.Parameters.Clear()
        $sqlCommand.Parameters.AddWithValue("@groupId", $data.groupId)
        $sqlCommand.Parameters.AddWithValue("@hostId", $data.hostId)
        $sqlCommand.Parameters.AddWithValue("@processId", $data.processId)
        $sqlCommand.Parameters.AddWithValue("@name", $name)
        $sqlCommand.Parameters.AddWithValue("@timestamp", [datetime]$_.timestamp)
        $sqlCommand.Parameters.AddWithValue("@value", [float]$_.value)
        $sqlCommand.Parameters.AddWithValue("@units", $_.units)

        $sqlCommand.ExecuteNonQuery()
    }
}

# Close the SQL connection
$sqlConnection.Close()

Write-Output "Data inserted into SQL Server table successfully."

=============================================================================================================================================================================


Full script with Atlas API output as input:


# Load required modules
Import-Module VaultSharp
Import-Module SqlServer
Import-Module Az.Accounts
Import-Module Az.Resources

# Function to retrieve SQL Server connection details from HashiCorp Vault
function Get-SqlServerConnectionDetails {
    param (
        [string]$vaultAddress,
        [string]$vaultToken,
        [string]$secretPath
    )

    # Initialize the Vault client
    $vaultClient = New-Object VaultSharp.VaultClient.VaultClient -ArgumentList $vaultAddress
    $vaultClient.AuthenticateWithToken($vaultToken)

    # Retrieve the SQL Server connection details from HashiCorp Vault
    $sqlServerDetails = $vaultClient.Secret.Read($secretPath).Data

    return $sqlServerDetails
}

# Function to retrieve Atlas API key from HashiCorp Vault
function Get-AtlasApiKey {
    param (
        [string]$vaultAddress,
        [string]$vaultToken,
        [string]$apiKeyPath
    )

    # Initialize the Vault client
    $vaultClient = New-Object VaultSharp.VaultClient.VaultClient -ArgumentList $vaultAddress
    $vaultClient.AuthenticateWithToken($vaultToken)

    # Retrieve the Atlas API key from HashiCorp Vault
    $apiKey = $vaultClient.Secret.Read($apiKeyPath).Data.value

    return $apiKey
}

# Function to insert data into SQL Server table
function Insert-DataIntoSqlServer {
    param (
        [string]$sqlConnectionString,
        [object]$data
    )

    # Create a SqlConnection object
    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($sqlConnectionString)

    # Open the SQL connection
    $sqlConnection.Open()

    # Define the SQL query to insert data into the table
    $sqlInsertQuery = "INSERT INTO Measurement (groupId, hostId, processId, name, timestamp, value, units) VALUES (@groupId, @hostId, @processId, @name, @timestamp, @value, @units)"

    # Create a SqlCommand object
    $sqlCommand = $sqlConnection.CreateCommand()
    $sqlCommand.CommandText = $sqlInsertQuery

    # Iterate over the measurements in the JSON and insert data into the SQL table
    $data.measurements | ForEach-Object {
        $name = $_.name
        $_.dataPoints | ForEach-Object {
            $sqlCommand.Parameters.Clear()
            $sqlCommand.Parameters.AddWithValue("@groupId", $data.groupId)
            $sqlCommand.Parameters.AddWithValue("@hostId", $data.hostId)
            $sqlCommand.Parameters.AddWithValue("@processId", $data.processId)
            $sqlCommand.Parameters.AddWithValue("@name", $name)
            $sqlCommand.Parameters.AddWithValue("@timestamp", [datetime]$_.timestamp)
            $sqlCommand.Parameters.AddWithValue("@value", [float]$_.value)
            $sqlCommand.Parameters.AddWithValue("@units", $_.units)

            $sqlCommand.ExecuteNonQuery()
        }
    }

    # Close the SQL connection
    $sqlConnection.Close()

    Write-Output "Data inserted into SQL Server table successfully."
}

# Define the HashiCorp Vault parameters
$vaultAddress = "<HashiCorp Vault address>"
$vaultToken = "<HashiCorp Vault token>"
$secretPath = "<HashiCorp Vault secret path>"
$apiKeyPath = "<HashiCorp Vault API key path>"

# Retrieve SQL Server connection details from HashiCorp Vault
$sqlServerDetails = Get-SqlServerConnectionDetails -vaultAddress $vaultAddress -vaultToken $vaultToken -secretPath $secretPath

# Retrieve Atlas API key from HashiCorp Vault
$apiKey = Get-AtlasApiKey -vaultAddress $vaultAddress -vaultToken $vaultToken -apiKeyPath $apiKeyPath

# Create the SQL Server connection string
$sqlConnectionString = "Server=$($sqlServerDetails.Server);Database=$($sqlServerDetails.Database);User Id=$($sqlServerDetails.Username);Password=$($sqlServerDetails.Password)"

# Retrieve JSON data from Atlas API
$headers = @{
    "Content-Type" = "application/json"
    "Authorization" = "Bearer $apiKey"
}
$url = "https://cloud.mongodb.com/api/atlas/v2.0/groups/<YOUR_GROUP_ID>/processes/<YOUR_HOST_ID>/measurements"
$jsonData = Invoke-RestMethod -Uri $url -Headers $headers -Method Get

# Insert data into SQL Server table
Insert-DataIntoSqlServer -sqlConnectionString $sqlConnectionString -data $jsonData

