# Load the required assemblies
Add-Type -AssemblyName "System.Data"

# Function to insert data into SQL Server table using SqlBulkCopy
function Insert-DataIntoSqlServer {
    param (
        [string]$sqlConnectionString,
        [object]$data
    )

    # Create a SqlConnection object
    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($sqlConnectionString)

    # Open the SQL connection
    $sqlConnection.Open()

    # Create a DataTable to hold the data
    $dataTable = New-Object System.Data.DataTable
    $dataTable.Columns.Add("hostname_port", [System.String])
    $dataTable.Columns.Add("projectId", [System.String])
    $dataTable.Columns.Add("replicaSetName", [System.String])
    $dataTable.Columns.Add("nodeType", [System.String])
    $dataTable.Columns.Add("version", [System.String])
    $dataTable.Columns.Add("clusterCreated", [System.DateTime])

    # Add rows to the DataTable
    $data.results | ForEach-Object {
        $row = $dataTable.NewRow()
        $row["hostname_port"] = $_.id
        $row["projectId"] = $_.groupId
        $row["replicaSetName"] = $_.replicaSetName
        $row["nodeType"] = $_.typeName
        $row["version"] = $_.version
        $row["clusterCreated"] = [datetime]$_.created
        $dataTable.Rows.Add($row) | Out-Null
    }

    # Create a SqlBulkCopy object
    $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy($sqlConnection)

    # Set the destination table name
    $bulkCopy.DestinationTableName = "MongoDB.MongoServers_STG"

    # Set the batch size (optional)
    $bulkCopy.BatchSize = 1000

    # Write the data to the SQL Server table
    $bulkCopy.WriteToServer($dataTable)

    # Close the SQL connection
    $sqlConnection.Close()

    Write-Output "Data inserted into SQL Server table successfully."
}

# Function to fetch organization and API keys from SQL Server
function Get-OrganizationsAndKeys {
    param (
        [string]$sqlConnectionString
    )

    # Create a SqlConnection object
    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($sqlConnectionString)

    # Open the SQL connection
    $sqlConnection.Open()

    # Define the query to fetch organization and API keys
    $query = "SELECT Organization, APIKey FROM Organizations"

    # Create a SqlCommand object
    $command = New-Object System.Data.SqlClient.SqlCommand($query, $sqlConnection)

    # Execute the query and read the results
    $reader = $command.ExecuteReader()

    # Create an array to hold the results
    $results = @()

    while ($reader.Read()) {
        $results += [pscustomobject]@{
            Organization = $reader["Organization"]
            APIKey       = $reader["APIKey"]
        }
    }

    # Close the reader and the SQL connection
    $reader.Close()
    $sqlConnection.Close()

    return $results
}

# Define SQL Server connection details
$sqlServer = "server123"
$database = "DBAWarehouse"
$sqlConnectionString = "Server=$sqlServer;Database=$database;Integrated Security=True;"

# Get organizations and their API keys
$organizationsAndKeys = Get-OrganizationsAndKeys -sqlConnectionString $sqlConnectionString

# Loop through each organization and project
foreach ($org in $organizationsAndKeys) {
    $organization = $org.Organization
    $apiKey = $org.APIKey

    # Fetch projects for the organization using the API key
    $projectsUrl = "https://api.mongodb.com/v1/orgs/$organization/projects"
    $projectsResponse = Invoke-RestMethod -Uri $projectsUrl -Headers @{ "Authorization" = "Bearer $apiKey" }

    foreach ($project in $projectsResponse.projects) {
        $projectId = $project.id

        # Fetch data from MongoDB for the project
        $mongoUrl = "https://api.mongodb.com/v1/projects/$projectId/servers"
        $mongoData = Invoke-RestMethod -Uri $mongoUrl -Headers @{ "Authorization" = "Bearer $apiKey" }

        # Insert data into SQL Server
        Insert-DataIntoSqlServer -sqlConnectionString $sqlConnectionString -data $mongoData
    }
}

Write-Output "All data processed successfully."
