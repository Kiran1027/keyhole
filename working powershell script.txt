
$username = "zfgdkryh"
$password = ConvertTo-SecureString "c7c49878-e8be-43db-ba09-473cb2bf645f" -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential($username, $password)
$apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/656639f67f8edf7a8e1062ce/processes?pretty=true"
$headers = @{
    "Accept" = "application/vnd.atlas.2023-02-01+json"
}
$response = Invoke-RestMethod -Uri $apiURL  -Credential $credential  -Headers $headers

$response

$jsonString = $response | ConvertTo-Json -Depth 100

$jsonString

  $jsonString | Out-File -FilePath "output3.json" -Encoding UTF8

$formattedResponse = $jsonString | ConvertTo-Json -Depth 10 | ConvertFrom-Json | Format-Table -AutoSize

    # Write the formatted response to a file
    $formattedResponse | Out-File -FilePath "output2.csv" -Encoding UTF8






curl --user "onlczuym:db7b12ac-d35f-4f52-aee6-33bb37f4ba23" --digest --header "Accept: application/vnd.atlas.2023-02-01+json" "https://cloud.mongodb.com/api/atlas/v2/groups/60f6ed508b8b1b6d8f916243/processes"


=================================================================================================================================================================


curl --user "zfgdkryh:c7c49878-e8be-43db-ba09-473cb2bf645f" --digest --header "Accept: application/vnd.atlas.2023-02-01+json"  "https://cloud.mongodb.com/api/atlas/v2/groups/656639f67f8edf7a8e1062ce/processes/atlas-z9idw7-shard-00-02.xwl4k.mongodb.net:27017/measurements?granularity=PT1H&start=2024-04-03T00:00:00Z&end=2024-04-04T00:00:00Z"


$username = "zfgdkryh"
$password = ConvertTo-SecureString "c7c49878-e8be-43db-ba09-473cb2bf645f" -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential($username, $password)
$apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/656639f67f8edf7a8e1062ce/processes/atlas-z9idw7-shard-00-02.xwl4k.mongodb.net:27017/measurements?granularity=PT1H&start=2024-04-03T00:00:00Z&end=2024-04-04T00:00:00Z"
$headers = @{
    "Accept" = "application/vnd.atlas.2023-02-01+json"
}
$response = Invoke-RestMethod -Uri $apiURL  -Credential $credential  -Headers $headers

$response

$jsonString = $response | ConvertTo-Json -Depth 100

$jsonString

===================================================================================================================================================================================================================================

Servers final version:


# Function to insert data into SQL Server table using SqlBulkCopy
function Insert-DataIntoSqlServer {
    param (
        [string]$sqlConnectionString,
        [object]$data
    )

    # Create a SqlConnection object
    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($sqlConnectionString)

    # Open the SQL connection
    $sqlConnection.Open()

    # Create a DataTable to hold the data
    $dataTable = New-Object System.Data.DataTable
    $dataTable.Columns.Add("hostname_port", [System.String])
    $dataTable.Columns.Add("projectId", [System.String])
    $dataTable.Columns.Add("replicaSetName", [System.String])
    $dataTable.Columns.Add("nodeType", [System.String])
    $dataTable.Columns.Add("version", [System.String])
    $dataTable.Columns.Add("clusterCreated", [System.DateTime])


    # Add rows to the DataTable
    $data.results | ForEach-Object {
        $row = $dataTable.NewRow()
        $row["hostname_port"] = $_.id
        $row["projectId"] = $_.groupId
        $row["replicaSetName"] = $_.replicaSetName
        $row["nodeType"] = $_.typeName
        $row["version"] = $_.version
        $row["clusterCreated"] = [datetime]$_.created
        $dataTable.Rows.Add($row) | Out-Null
    }

    # Create a SqlBulkCopy object
    $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy($sqlConnection)

    # Set the destination table name
    $bulkCopy.DestinationTableName = "MongoDB.MongoServers_STG"

    # Set the batch size (optional)
    $bulkCopy.BatchSize = 1000

    # Write the data to the SQL Server table
    $bulkCopy.WriteToServer($dataTable)

    # Close the SQL connection
    $sqlConnection.Close()

    Write-Output "Data inserted into SQL Server table successfully."
}

# Define SQL Server connection details
$sqlServer = "LOUSQLWTS5038"
$database = "DBAWarehouse"


# Create the SQL Server connection string
$sqlConnectionString = "server=$sqlServer;database=$database;trusted_connection=true;"


$username = "xfcwddyc"
$password = ConvertTo-SecureString "ed06b524-717f-4405-af7e-2fc2f8a09ef2" -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential($username, $password)

$apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/65df72430687e550b470053d/processes"
$headers = @{
    "Accept" = "application/vnd.atlas.2023-02-01+json"
}
$jsonData = Invoke-RestMethod -Uri $apiURL  -Credential $credential  -Headers $headers



# Insert data into SQL Server table using bulk copy
Insert-DataIntoSqlServer -sqlConnectionString $sqlConnectionString -data $jsonData


=================================================================================================================================================================================================================================

Metrics Final version: 


# Define SQL Server connection details

$sqlServer = "LOUSQLWTS5038"

$database = "DBAWarehouse"


# Create the SQL Server connection string

$sqlConnectionString = "server=$sqlServer;database=$database;trusted_connection=true;"


$username = "xfcwddyc"

$password = ConvertTo-SecureString "ed06b524-717f-4405-af7e-2fc2f8a09ef2" -AsPlainText -Force

$credential = New-Object System.Management.Automation.PSCredential($username, $password)

$apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/65df72430687e550b470053d/processes/atlas-kzkouz-shard-00-01.gyl5p.mongodb.net:27017/measurements?granularity=PT1H&start=2024-05-07T00:00:00Z&end=2024-05-08T00:00:00Z"

$headers = @{

    "Accept" = "application/vnd.atlas.2023-02-01+json"

}

$data = Invoke-RestMethod -Uri $apiURL  -Credential $credential  -Headers $headers


    # Create a SqlConnection object

    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection($sqlConnectionString)

    # Open the SQL connection

    $sqlConnection.Open()

    # Create a DataTable to hold the data

    $dataTable = New-Object System.Data.DataTable

    $dataTable.Columns.Add("groupId", [System.String])

    $dataTable.Columns.Add("hostId", [System.String])

    $dataTable.Columns.Add("processId", [System.String])

    $dataTable.Columns.Add("name", [System.String])

     $dataTable.Columns.Add("timestamp", [System.DateTime])

    $dataTable.Columns.Add("value", [System.String])

    $dataTable.Columns.Add("units", [System.String])

   


    # Add rows to the DataTable
 
$data.measurements | ForEach-Object {

Write-host "1st for loop $name"

    $name = $_.name

    $_.dataPoints | ForEach-Object {
 
        $row = $dataTable.NewRow()

        $row.groupId = $data.groupId

        $row.hostId = $data.hostId

        $row.processId = $data.processId

        $row.name= $name

        $row.timestamp = $_.timestamp

        $row.value = $_.value

        $row.units = $_.units

        

        $dataTable.Rows.Add($row) | Out-Null
write-host "inside 2nd for loop - $data.groupId"
 
        }

        }

    # Create a SqlBulkCopy object

    $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy($sqlConnection)

    # Set the destination table name

    $bulkCopy.DestinationTableName = "MongoDB.PerformanceMetrics_STG"

    # Set the batch size (optional)

    $bulkCopy.BatchSize = 1000

    # Write the data to the SQL Server table

    $bulkCopy.WriteToServer($dataTable)

    # Close the SQL connection

    $sqlConnection.Close()

    Write-Output "Data inserted into SQL Server table successfully."

