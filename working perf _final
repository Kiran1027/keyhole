# Function to get SQL connection
function Get-SqlConnection {
    param (
        [string]$sqlServer,
        [string]$database
    )
    $SQLConn = New-Object System.Data.SqlClient.SqlConnection
    $SQLConn.ConnectionString = "Server=$sqlServer;Database=$database;Trusted_Connection=True;"
    $SQLConn.Open()
    return $SQLConn
}

# Function to get API keys from the database
function Get-ApiKeys {
    param (
        [System.Data.SqlClient.SqlConnection]$SQLConn
    )
    $keys = @()
    $query = "SELECT PublicKey, PrivateKey FROM MongoDB.DimOrganization WHERE OrgName = 'CAPE'"
    $cmd = $SQLConn.CreateCommand()
    $cmd.CommandText = $query
    $reader = $cmd.ExecuteReader()
    try {
        while ($reader.Read()) {
            $keys = @($reader["PublicKey"], $reader["PrivateKey"])
        }
    } finally {
        $reader.Close()
    }
    if ($keys.Count -eq 0) {
        throw "No API keys found."
    }
    return $keys
}

# Function to get server information from the database
function Get-ServerInfo {
    param (
        [System.Data.SqlClient.SqlConnection]$SQLConn
    )
    $servers = @()
    $query = "SELECT HostName_Port, GroupId FROM MongoDB.MongoServers_STG"
    $cmd = $SQLConn.CreateCommand()
    $cmd.CommandText = $query
    $reader = $cmd.ExecuteReader()
    try {
        while ($reader.Read()) {
            $servers += ,@($reader["HostName_Port"], $reader["GroupId"])
        }
    } finally {
        $reader.Close()
    }
    return $servers
}

# Function to invoke MongoDB Atlas API and get performance data
function Invoke-MongoDBAtlasAPI {
    param (
        [string]$GroupId,
        [string]$SourceServer,
        [PSCredential]$credential
    )
    $currentDate = Get-Date
    $startDate = $currentDate.AddDays(-1).Date
    $endDate = $currentDate.Date.AddDays(1)
    $startDateISO = $startDate.ToString("yyyy-MM-ddTHH:mm:ssZ")
    $endDateISO = $endDate.ToString("yyyy-MM-ddTHH:mm:ssZ")

    $apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/$GroupId/processes/$SourceServer/measurements?granularity=PT1H&start=$startDateISO&end=$endDateISO"
    $headers = @{
        "Accept" = "application/vnd.atlas.2023-02-01+json"
    }
    return Invoke-RestMethod -Uri $apiURL -Credential $credential -Headers $headers
}

# Combined function to convert JSON data to DataTable and insert it into SQL Server
function ConvertAndInsertData {
    param (
        [psobject]$data,
        [string]$sqlServer,
        [string]$database
    )

    Write-Output "Data received for conversion:"
    Write-Output ($data | ConvertTo-Json -Depth 10)

    $dataTable = New-Object System.Data.DataTable
    $dataTable.Columns.Add("groupId", [System.String])
    $dataTable.Columns.Add("hostId", [System.String])
    $dataTable.Columns.Add("processId", [System.String])
    $dataTable.Columns.Add("name", [System.String])
    $dataTable.Columns.Add("timestamp", [System.DateTime])
    $dataTable.Columns.Add("value", [System.String])
    $dataTable.Columns.Add("units", [System.String])

    if ($null -eq $data.measurements) {
        throw "The 'measurements' property is missing or null in the provided data."
    }

    foreach ($measurement in $data.measurements) {
        $name = $measurement.name
        foreach ($dataPoint in $measurement.dataPoints) {
            $row = $dataTable.NewRow()
            $row["groupId"] = $data.groupId
            $row["hostId"] = $data.hostId
            $row["processId"] = $data.processId
            $row["name"] = $name
            $row["timestamp"] = [DateTime]$dataPoint.timestamp
            $row["value"] = [string]$dataPoint.value
            $row["units"] = [string]$dataPoint.units
            $dataTable.Rows.Add($row)
        }
    }

    Write-Output "DataTable created with schema:"
    $dataTable.Columns | ForEach-Object { Write-Output "Column: $($_.ColumnName) Type: $($_.DataType)" }
    Write-Output "DataTable has $($dataTable.Rows.Count) rows."

    $sqlConnectionString = "Server=$sqlServer;Database=$database;Trusted_Connection=True;"
    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection $sqlConnectionString
    try {
        $sqlConnection.Open()
        $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy $sqlConnection
        $bulkCopy.DestinationTableName = "MongoDB.PerformanceMetrics_STG"
        $bulkCopy.BatchSize = 1000

        # Debugging: Print the DataTable schema and rows count
        Write-Output "DataTable schema before insert:"
        $dataTable.Columns | ForEach-Object { Write-Output "Column: $($_.ColumnName) Type: $($_.DataType)" }
        Write-Output "DataTable has $($dataTable.Rows.Count) rows before insert."

        $bulkCopy.WriteToServer($dataTable)
    } finally {
        $sqlConnection.Close()
    }

    Write-Output "DataTable inserted into SQL."
}

# Main script
try {
    $sqlServer = "DBADWHTest"
    $database = "DBAWarehouse"

    Write-Output "Connecting to SQL Server..."
    $SQLConn = Get-SqlConnection -sqlServer $sqlServer -database $database

    Write-Output "Fetching API keys..."
    $keys = Get-ApiKeys -SQLConn $SQLConn
    Write-Output "API keys fetched: $keys"

    $username = $keys[0]
    $password = ConvertTo-SecureString $keys[1] -AsPlainText -Force
    $credential = New-Object System.Management.Automation.PSCredential ($username, $password)

    Write-Output "Fetching server info..."
    $servers = Get-ServerInfo -SQLConn $SQLConn
    Write-Output "Servers fetched: $servers"

    foreach ($server in $servers) {
        Write-Output "Processing server: $server"

        $SourceServer = $server[0]
        $GroupId = $server[1]

        Write-Output "Invoking MongoDB Atlas API..."
        $data = Invoke-MongoDBAtlasAPI -GroupId $GroupId -SourceServer $SourceServer -credential $credential
        Write-Output "Data fetched from API."

        Write-Output "Converting JSON to DataTable and inserting into SQL..."
        ConvertAndInsertData -data $data -sqlServer $sqlServer -database $database
    }
} catch {
    Write-Error "An error occurred: $_"
} finally {
    if ($SQLConn -and $SQLConn.State -eq 'Open') { $SQLConn.Close() }
    Write-Output "Process completed."
}


=====================================================================================================================================================================================



# Function to get SQL connection
function Get-SqlConnection {
    param (
        [string]$sqlServer,  # SQL Server name
        [string]$database    # Database name
    )
    $SQLConn = New-Object System.Data.SqlClient.SqlConnection
    $SQLConn.ConnectionString = "Server=$sqlServer;Database=$database;Trusted_Connection=True;"  # Connection string
    $SQLConn.Open()  # Open the connection
    return $SQLConn
}

# Function to get API keys from the database
function Get-ApiKeys {
    param (
        [System.Data.SqlClient.SqlConnection]$SQLConn  # SQL Connection object
    )
    $keys = @()  # Initialize an empty array to store keys
    $query = "SELECT PublicKey, PrivateKey FROM MongoDB.DimOrganization WHERE OrgName = 'CAPE'"  # Query to fetch keys
    $cmd = $SQLConn.CreateCommand()  # Create a SQL command
    $cmd.CommandText = $query  # Set the query
    $reader = $cmd.ExecuteReader()  # Execute the query and get the reader
    try {
        while ($reader.Read()) {
            $keys = @($reader["PublicKey"], $reader["PrivateKey"])  # Read keys from the reader
        }
    } finally {
        $reader.Close()  # Ensure the reader is closed
    }
    if ($keys.Count -eq 0) {
        throw "No API keys found."  # Throw an error if no keys are found
    }
    return $keys  # Return the keys
}

# Function to get server information from the database
function Get-ServerInfo {
    param (
        [System.Data.SqlClient.SqlConnection]$SQLConn  # SQL Connection object
    )
    $servers = @()  # Initialize an empty array to store servers
    $query = "SELECT HostName_Port, GroupId FROM MongoDB.MongoServers_STG"  # Query to fetch server info
    $cmd = $SQLConn.CreateCommand()  # Create a SQL command
    $cmd.CommandText = $query  # Set the query
    $reader = $cmd.ExecuteReader()  # Execute the query and get the reader
    try {
        while ($reader.Read()) {
            $servers += ,@($reader["HostName_Port"], $reader["GroupId"])  # Read server info from the reader
        }
    } finally {
        $reader.Close()  # Ensure the reader is closed
    }
    return $servers  # Return the server info
}

# Function to invoke MongoDB Atlas API and get performance data
function Invoke-MongoDBAtlasAPI {
    param (
        [string]$GroupId,         # Group ID for MongoDB Atlas
        [string]$SourceServer,    # Source server for the API call
        [PSCredential]$credential # Credentials for API authentication
    )
    $currentDate = Get-Date
    $startDate = $currentDate.AddDays(-1).Date  # Start date for the API query
    $endDate = $currentDate.Date.AddDays(1)  # End date for the API query
    $startDateISO = $startDate.ToString("yyyy-MM-ddTHH:mm:ssZ")  # Format start date to ISO
    $endDateISO = $endDate.ToString("yyyy-MM-ddTHH:mm:ssZ")  # Format end date to ISO

    $apiURL = "https://cloud.mongodb.com/api/atlas/v2/groups/$GroupId/processes/$SourceServer/measurements?granularity=PT1H&start=$startDateISO&end=$endDateISO"  # API URL
    $headers = @{
        "Accept" = "application/vnd.atlas.2023-02-01+json"
    }
    return Invoke-RestMethod -Uri $apiURL -Credential $credential -Headers $headers  # Call the API and return the result
}

# Combined function to convert JSON data to DataTable and insert it into SQL Server
function ConvertAndInsertData {
    param (
        [psobject]$data,       # JSON data from API
        [string]$sqlServer,    # SQL Server name
        [string]$database      # Database name
    )

    # Create a new DataTable with the required columns
    $dataTable = New-Object System.Data.DataTable
    $dataTable.Columns.Add("groupId", [System.String])
    $dataTable.Columns.Add("hostId", [System.String])
    $dataTable.Columns.Add("processId", [System.String])
    $dataTable.Columns.Add("name", [System.String])
    $dataTable.Columns.Add("timestamp", [System.DateTime])
    $dataTable.Columns.Add("value", [System.String])
    $dataTable.Columns.Add("units", [System.String])

    if ($null -eq $data.measurements) {
        throw "The 'measurements' property is missing or null in the provided data."  # Throw error if no measurements
    }

    foreach ($measurement in $data.measurements) {
        $name = $measurement.name  # Measurement name
        foreach ($dataPoint in $measurement.dataPoints) {
            $row = $dataTable.NewRow()  # Create a new row in the DataTable
            $row["groupId"] = $data.groupId
            $row["hostId"] = $data.hostId
            $row["processId"] = $data.processId
            $row["name"] = $name
            $row["timestamp"] = [DateTime]$dataPoint.timestamp
            $row["value"] = [string]$dataPoint.value
            $row["units"] = [string]$dataPoint.units
            $dataTable.Rows.Add($row)  # Add the row to the DataTable
        }
    }

    $sqlConnectionString = "Server=$sqlServer;Database=$database;Trusted_Connection=True;"  # SQL connection string
    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection $sqlConnectionString
    try {
        $sqlConnection.Open()  # Open the SQL connection
        $bulkCopy = New-Object System.Data.SqlClient.SqlBulkCopy $sqlConnection
        $bulkCopy.DestinationTableName = "MongoDB.PerformanceMetrics_STG"  # Destination table
        $bulkCopy.BatchSize = 1000  # Batch size for bulk copy

        $bulkCopy.WriteToServer($dataTable)  # Write the DataTable to the SQL Server
    } finally {
        $sqlConnection.Close()  # Ensure the SQL connection is closed
    }
}

# Main script
try {
    $sqlServer = "DBADWHTest"
    $database = "DBAWarehouse"

    $SQLConn = Get-SqlConnection -sqlServer $sqlServer -database $database  # Get SQL connection

    $keys = Get-ApiKeys -SQLConn $SQLConn  # Fetch API keys
    $username = $keys[0]
    $password = ConvertTo-SecureString $keys[1] -AsPlainText -Force
    $credential = New-Object System.Management.Automation.PSCredential ($username, $password)  # Create PSCredential object

    $servers = Get-ServerInfo -SQLConn $SQLConn  # Fetch server info

    foreach ($server in $servers) {
        $SourceServer = $server[0]
        $GroupId = $server[1]

        $data = Invoke-MongoDBAtlasAPI -GroupId $GroupId -SourceServer $SourceServer -credential $credential  # Call MongoDB Atlas API

        ConvertAndInsertData -data $data -sqlServer $sqlServer -database $database  # Convert and insert data into SQL
    }
} catch {
    Write-Error "An error occurred: $_"  # Catch and display errors
} finally {
    if ($SQLConn -and $SQLConn.State -eq 'Open') { $SQLConn.Close() }  # Ensure SQL connection is closed
}
